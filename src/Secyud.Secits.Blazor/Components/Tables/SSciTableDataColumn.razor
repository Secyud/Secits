@namespace Secyud.Secits.Blazor.Components
@inherits ScSettingBase<IScTable<TItem>>
@typeparam TItem
@typeparam TValue

@code
{
    public virtual RenderFragment GenerateHeader() => __builder =>
    {
        @Caption
        if (EnableSorter)
        {
            // TODO Sorter
        }

        if (EnableFilter)
        {
            @GenerateFilter()
        }
    };

    public virtual RenderFragment GenerateFilter() => __builder =>
    {
        // TODO Filter 
        switch (typeof(TValue).Name)
        {
            case nameof(Int64):
                <SInputNumber TValue="long"
                              ChangeMode="InputChangeMode.OnChange"
                              ValueChanged="@(l => SetFilterValueAsync(l))"/>
                break;
            case nameof(Int32):
                <SInputNumber TValue="int"
                              ChangeMode="InputChangeMode.OnChange"
                              ValueChanged="@(l => SetFilterValueAsync(l))"/>
                break;
            case nameof(Int16):
                <SInputNumber TValue="short"
                              ChangeMode="InputChangeMode.OnChange"
                              ValueChanged="@(l => SetFilterValueAsync(l))"/>
                break;
            case nameof(Byte):
                <SInputNumber TValue="byte"
                              ChangeMode="InputChangeMode.OnChange"
                              ValueChanged="@(l => SetFilterValueAsync(l))"/>
                break;
            case nameof(Double):
                <SInputNumber TValue="double"
                              ChangeMode="InputChangeMode.OnChange"
                              ValueChanged="@(l => SetFilterValueAsync(l))"/>
                break;
            case nameof(Single):
                <SInputNumber TValue="float"
                              ChangeMode="InputChangeMode.OnChange"
                              ValueChanged="@(l => SetFilterValueAsync(l))"/>
                break;
            case nameof(Decimal):
                <SInputNumber TValue="decimal"
                              ChangeMode="InputChangeMode.OnChange"
                              ValueChanged="@(l => SetFilterValueAsync(l))"/>
                break;
            case nameof(DateTime):

                break;
            default:
                <SInputText
                    ChangeMode="InputChangeMode.OnChange"
                    ValueChanged="SetFilterValueAsync"/>
                break;
        }
    };

    public virtual RenderFragment GenerateColumn(TItem item) => __builder =>
    {
        if (ValueField is null) return;
        var value = GetField(item);
        if (Format is null)
        {
            @value
        }
        else
        {
            @string.Format($"{{0:{Format}}}", value)
        }
    };

    public RenderFragment GenerateFooter() => __builder => { };
}
