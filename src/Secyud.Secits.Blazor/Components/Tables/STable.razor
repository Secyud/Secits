@namespace Secyud.Secits.Blazor.Components
@inherits SItemsIteratorBase<TItem>
@typeparam TItem

@{
    base.BuildRenderTree(__builder);
}

@code
{
    protected override RenderFragment GenerateHeader() => __builder =>
    {
        @base.GenerateHeader()
        @if (!DisableHeader)
        {
            <table class="table-header">
                <thead>
                <tr>
                    @for (var i = 0; i < _columns.Count; i++)
                    {
                        var column = _columns[i];
                        <th style="--cw: @(column.GetColumnWidth())px;">
                            @column.GenerateHeader()
                            @foreach (var header in _tableHeaders)
                            {
                                @header.GenerateHeader(i)
                            }
                        </th>
                    }
                </tr>
                </thead>
            </table>
        }
    };

    protected override RenderFragment GenerateIterator() => __builder =>
    {
        <div class="table-body">
            <table>
                <tbody>
                <tr>
                    @foreach (var column in _columns)
                    {
                        <td style="--cw: @column.GetColumnWidth()px;"/>
                    }
                </tr>
                @base.GenerateIterator()
                </tbody>
            </table>
        </div>
    };

    protected override RenderFragment GenerateFooter() => __builder =>
    {
        @if (!DisableFooter)
        {
            <table class="table-footer">
                <tfoot>
                <tr>
                    @for (var i = 0; i < _columns.Count; i++)
                    {
                        var column = _columns[i];
                        <td style="--cw: @(column.GetColumnWidth())px;">
                            @column.GenerateFooter()
                            @foreach (var footer in _tableFooters)
                            {
                                @footer.GenerateFooter(i)
                            }
                        </td>
                    }
                </tr>
                </tfoot>
            </table>
        }

        @base.GenerateFooter()
    };

    protected override RenderFragment<TItem> GenerateRow()
    {
        if (RowRenderer is not null)
            return base.GenerateRow();

        return item => __builder =>
        {
            <tr>
                @(GenerateCol()(item))
            </tr>
        };
    }

    protected override RenderFragment<TItem> GenerateCol() => item => __builder =>
    {
        @foreach (var column in _columns)
        {
            <td>
                @column.GenerateColumn(item)
            </td>
        }
    };
}
