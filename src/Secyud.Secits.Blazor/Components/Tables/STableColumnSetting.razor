@namespace Secyud.Secits.Blazor
@inherits SSettingComp<STable<TItem>>
@typeparam TItem
@typeparam TValue

@code
{
    public virtual RenderFragment GenerateHeader() => __builder =>
    {
        if (!RenderHeader())
            return;
        @Caption
        if (RenderSorter())
            return;
        // TODO Sorter
    };

    public virtual RenderFragment GenerateFilter() => __builder =>
    {
        // TODO Filter
        switch (FieldType?.Name)
        {
            case nameof(Int64):
                <SInputNumber TValue="long"
                              ChangeMode="InputChangeMode.OnChange"
                              ValueChanged="@(l => SetFilterValueAsync(l))"/>
                break;
            case nameof(Int32):
                <SInputNumber TValue="int"
                              ChangeMode="InputChangeMode.OnChange"
                              ValueChanged="@(l => SetFilterValueAsync(l))"/>
                break;
            case nameof(Int16):
                <SInputNumber TValue="short"
                              ChangeMode="InputChangeMode.OnChange"
                              ValueChanged="@(l => SetFilterValueAsync(l))"/>
                break;
            case nameof(Byte):
                <SInputNumber TValue="byte"
                              ChangeMode="InputChangeMode.OnChange"
                              ValueChanged="@(l => SetFilterValueAsync(l))"/>
                break;
            case nameof(Double):
                <SInputNumber TValue="double"
                              ChangeMode="InputChangeMode.OnChange"
                              ValueChanged="@(l => SetFilterValueAsync(l))"/>
                break;
            case nameof(Single):
                <SInputNumber TValue="float"
                              ChangeMode="InputChangeMode.OnChange"
                              ValueChanged="@(l => SetFilterValueAsync(l))"/>
                break;
            case nameof(Decimal):
                <SInputNumber TValue="decimal"
                              ChangeMode="InputChangeMode.OnChange"
                              ValueChanged="@(l => SetFilterValueAsync(l))"/>
                break;
            case nameof(DateTime):

                break;
            default:
                <SInputText
                    ChangeMode="InputChangeMode.OnChange"
                    ValueChanged="SetFilterValueAsync"/>
                break;
        }
    };

    public virtual RenderFragment GenerateBody(TItem item) => __builder =>
    {
        if (Field is null) return;
        @GetField(item)
    };
}
